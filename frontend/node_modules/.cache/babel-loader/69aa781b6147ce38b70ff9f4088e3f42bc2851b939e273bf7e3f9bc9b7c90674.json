{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api'; // Ajuste a URL conforme necessário\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  // 10 segundos timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Dados mock para desenvolvimento/teste\nconst mockData = {\n  alunos: [{\n    id: 1,\n    nome: 'João Silva',\n    email: 'joao.silva@email.com',\n    matricula: '2024001'\n  }, {\n    id: 2,\n    nome: 'Maria Santos',\n    email: 'maria.santos@email.com',\n    matricula: '2024002'\n  }, {\n    id: 3,\n    nome: 'Pedro Oliveira',\n    email: 'pedro.oliveira@email.com',\n    matricula: '2024003'\n  }, {\n    id: 4,\n    nome: 'Ana Costa',\n    email: 'ana.costa@email.com',\n    matricula: '2024004'\n  }],\n  professores: [{\n    id: 1,\n    nome: 'Dr. Carlos Mendes',\n    email: 'carlos.mendes@universidade.edu',\n    departamento: 'Ciência da Computação'\n  }, {\n    id: 2,\n    nome: 'Dra. Laura Ferreira',\n    email: 'laura.ferreira@universidade.edu',\n    departamento: 'Matemática'\n  }],\n  disciplinas: [{\n    id: 1,\n    nome: 'Desenvolvimento Web',\n    codigo: 'CC301',\n    cargaHoraria: 60\n  }, {\n    id: 2,\n    nome: 'Algoritmos e Estruturas de Dados',\n    codigo: 'CC201',\n    cargaHoraria: 80\n  }],\n  turmas: [{\n    id: 1,\n    ano: 2024,\n    periodo: '2024.2',\n    disciplina: {\n      id: 1,\n      nome: 'Desenvolvimento Web',\n      codigo: 'CC301',\n      cargaHoraria: 60\n    },\n    professor: {\n      id: 1,\n      nome: 'Dr. Carlos Mendes',\n      email: 'carlos.mendes@universidade.edu',\n      departamento: 'Ciência da Computação'\n    }\n  }, {\n    id: 2,\n    ano: 2024,\n    periodo: '2024.2',\n    disciplina: {\n      id: 2,\n      nome: 'Algoritmos e Estruturas de Dados',\n      codigo: 'CC201',\n      cargaHoraria: 80\n    },\n    professor: {\n      id: 2,\n      nome: 'Dra. Laura Ferreira',\n      email: 'laura.ferreira@universidade.edu',\n      departamento: 'Matemática'\n    }\n  }],\n  inscricoes: [{\n    id: 1,\n    aluno: {\n      id: 1,\n      nome: 'João Silva',\n      email: 'joao.silva@email.com',\n      matricula: '2024001'\n    },\n    turma: {\n      id: 1\n    },\n    dataInscricao: '2024-08-01'\n  }, {\n    id: 2,\n    aluno: {\n      id: 2,\n      nome: 'Maria Santos',\n      email: 'maria.santos@email.com',\n      matricula: '2024002'\n    },\n    turma: {\n      id: 1\n    },\n    dataInscricao: '2024-08-01'\n  }, {\n    id: 3,\n    aluno: {\n      id: 3,\n      nome: 'Pedro Oliveira',\n      email: 'pedro.oliveira@email.com',\n      matricula: '2024003'\n    },\n    turma: {\n      id: 2\n    },\n    dataInscricao: '2024-08-01'\n  }, {\n    id: 4,\n    aluno: {\n      id: 4,\n      nome: 'Ana Costa',\n      email: 'ana.costa@email.com',\n      matricula: '2024004'\n    },\n    turma: {\n      id: 2\n    },\n    dataInscricao: '2024-08-01'\n  }]\n};\n\n// Flag para usar dados mock quando a API não estiver disponível\nconst USE_MOCK_DATA = process.env.NODE_ENV === 'development';\nconst handleApiError = (error, mockData) => {\n  console.warn('API não disponível, usando dados mock:', error.message);\n  if (USE_MOCK_DATA && mockData) {\n    return Promise.resolve({\n      data: mockData\n    });\n  }\n  throw error;\n};\nexport const apiService = {\n  // Alunos\n  getAlunos: async () => {\n    try {\n      const response = await api.get('/alunos');\n      return response.data;\n    } catch (error) {\n      const mockResponse = await handleApiError(error, mockData.alunos);\n      return mockResponse.data;\n    }\n  },\n  getAluno: async id => {\n    try {\n      const response = await api.get(`/alunos/${id}`);\n      return response.data;\n    } catch (error) {\n      const aluno = mockData.alunos.find(a => a.id === id);\n      if (!aluno) throw new Error('Aluno não encontrado');\n      const mockResponse = await handleApiError(error, aluno);\n      return mockResponse.data;\n    }\n  },\n  // Professores\n  getProfessores: async () => {\n    try {\n      const response = await api.get('/professores');\n      return response.data;\n    } catch (error) {\n      const mockResponse = await handleApiError(error, mockData.professores);\n      return mockResponse.data;\n    }\n  },\n  getProfessor: async id => {\n    try {\n      const response = await api.get(`/professores/${id}`);\n      return response.data;\n    } catch (error) {\n      const professor = mockData.professores.find(p => p.id === id);\n      if (!professor) throw new Error('Professor não encontrado');\n      const mockResponse = await handleApiError(error, professor);\n      return mockResponse.data;\n    }\n  },\n  // Turmas\n  getTurmas: async () => {\n    try {\n      const response = await api.get('/turmas');\n      return response.data;\n    } catch (error) {\n      const mockResponse = await handleApiError(error, mockData.turmas);\n      return mockResponse.data;\n    }\n  },\n  getTurma: async id => {\n    try {\n      const response = await api.get(`/turmas/${id}`);\n      return response.data;\n    } catch (error) {\n      const turma = mockData.turmas.find(t => t.id === id);\n      if (!turma) throw new Error('Turma não encontrada');\n      const mockResponse = await handleApiError(error, turma);\n      return mockResponse.data;\n    }\n  },\n  // Inscrições\n  getInscricoes: async () => {\n    try {\n      const response = await api.get('/inscricoes');\n      return response.data;\n    } catch (error) {\n      const mockResponse = await handleApiError(error, mockData.inscricoes);\n      return mockResponse.data;\n    }\n  },\n  getInscricao: async id => {\n    try {\n      const response = await api.get(`/inscricoes/${id}`);\n      return response.data;\n    } catch (error) {\n      const inscricao = mockData.inscricoes.find(i => i.id === id);\n      if (!inscricao) throw new Error('Inscrição não encontrada');\n      const mockResponse = await handleApiError(error, inscricao);\n      return mockResponse.data;\n    }\n  },\n  // Obter alunos inscritos em uma turma específica\n  getAlunosPorTurma: async turmaId => {\n    try {\n      const inscricoes = await api.get('/inscricoes');\n      const inscricoesDaTurma = inscricoes.data.filter(inscricao => inscricao.turma.id === turmaId);\n      return inscricoesDaTurma.map(inscricao => inscricao.aluno);\n    } catch (error) {\n      // Fallback para dados mock\n      const inscricoesDaTurma = mockData.inscricoes.filter(inscricao => inscricao.turma.id === turmaId);\n      const alunosData = inscricoesDaTurma.map(inscricao => inscricao.aluno);\n      const mockResponse = await handleApiError(error, alunosData);\n      return mockResponse.data;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","mockData","alunos","id","nome","email","matricula","professores","departamento","disciplinas","codigo","cargaHoraria","turmas","ano","periodo","disciplina","professor","inscricoes","aluno","turma","dataInscricao","USE_MOCK_DATA","process","env","NODE_ENV","handleApiError","error","console","warn","message","Promise","resolve","data","apiService","getAlunos","response","get","mockResponse","getAluno","find","a","Error","getProfessores","getProfessor","p","getTurmas","getTurma","t","getInscricoes","getInscricao","inscricao","i","getAlunosPorTurma","turmaId","inscricoesDaTurma","filter","map","alunosData"],"sources":["F:/Desktop/trab/devweb/trabalho-3-devweb/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Aluno, Professor, Turma, Inscricao } from '../types';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api'; // Ajuste a URL conforme necessário\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000, // 10 segundos timeout\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Dados mock para desenvolvimento/teste\r\nconst mockData = {\r\n  alunos: [\r\n    { id: 1, nome: 'João Silva', email: 'joao.silva@email.com', matricula: '2024001' },\r\n    { id: 2, nome: 'Maria Santos', email: 'maria.santos@email.com', matricula: '2024002' },\r\n    { id: 3, nome: 'Pedro Oliveira', email: 'pedro.oliveira@email.com', matricula: '2024003' },\r\n    { id: 4, nome: 'Ana Costa', email: 'ana.costa@email.com', matricula: '2024004' }\r\n  ] as Aluno[],\r\n\r\n  professores: [\r\n    { id: 1, nome: 'Dr. Carlos Mendes', email: 'carlos.mendes@universidade.edu', departamento: 'Ciência da Computação' },\r\n    { id: 2, nome: 'Dra. Laura Ferreira', email: 'laura.ferreira@universidade.edu', departamento: 'Matemática' }\r\n  ] as Professor[],\r\n\r\n  disciplinas: [\r\n    { id: 1, nome: 'Desenvolvimento Web', codigo: 'CC301', cargaHoraria: 60 },\r\n    { id: 2, nome: 'Algoritmos e Estruturas de Dados', codigo: 'CC201', cargaHoraria: 80 }\r\n  ],\r\n\r\n  turmas: [\r\n    {\r\n      id: 1,\r\n      ano: 2024,\r\n      periodo: '2024.2',\r\n      disciplina: { id: 1, nome: 'Desenvolvimento Web', codigo: 'CC301', cargaHoraria: 60 },\r\n      professor: { id: 1, nome: 'Dr. Carlos Mendes', email: 'carlos.mendes@universidade.edu', departamento: 'Ciência da Computação' }\r\n    },\r\n    {\r\n      id: 2,\r\n      ano: 2024,\r\n      periodo: '2024.2',\r\n      disciplina: { id: 2, nome: 'Algoritmos e Estruturas de Dados', codigo: 'CC201', cargaHoraria: 80 },\r\n      professor: { id: 2, nome: 'Dra. Laura Ferreira', email: 'laura.ferreira@universidade.edu', departamento: 'Matemática' }\r\n    }\r\n  ] as Turma[],\r\n\r\n  inscricoes: [\r\n    { id: 1, aluno: { id: 1, nome: 'João Silva', email: 'joao.silva@email.com', matricula: '2024001' }, turma: { id: 1 } as any, dataInscricao: '2024-08-01' },\r\n    { id: 2, aluno: { id: 2, nome: 'Maria Santos', email: 'maria.santos@email.com', matricula: '2024002' }, turma: { id: 1 } as any, dataInscricao: '2024-08-01' },\r\n    { id: 3, aluno: { id: 3, nome: 'Pedro Oliveira', email: 'pedro.oliveira@email.com', matricula: '2024003' }, turma: { id: 2 } as any, dataInscricao: '2024-08-01' },\r\n    { id: 4, aluno: { id: 4, nome: 'Ana Costa', email: 'ana.costa@email.com', matricula: '2024004' }, turma: { id: 2 } as any, dataInscricao: '2024-08-01' }\r\n  ]\r\n};\r\n\r\n// Flag para usar dados mock quando a API não estiver disponível\r\nconst USE_MOCK_DATA = process.env.NODE_ENV === 'development';\r\n\r\nconst handleApiError = (error: any, mockData?: any) => {\r\n  console.warn('API não disponível, usando dados mock:', error.message);\r\n  if (USE_MOCK_DATA && mockData) {\r\n    return Promise.resolve({ data: mockData });\r\n  }\r\n  throw error;\r\n};\r\n\r\nexport const apiService = {\r\n  // Alunos\r\n  getAlunos: async (): Promise<Aluno[]> => {\r\n    try {\r\n      const response = await api.get('/alunos');\r\n      return response.data;\r\n    } catch (error) {\r\n      const mockResponse = await handleApiError(error, mockData.alunos);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  getAluno: async (id: number): Promise<Aluno> => {\r\n    try {\r\n      const response = await api.get(`/alunos/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      const aluno = mockData.alunos.find(a => a.id === id);\r\n      if (!aluno) throw new Error('Aluno não encontrado');\r\n      const mockResponse = await handleApiError(error, aluno);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  // Professores\r\n  getProfessores: async (): Promise<Professor[]> => {\r\n    try {\r\n      const response = await api.get('/professores');\r\n      return response.data;\r\n    } catch (error) {\r\n      const mockResponse = await handleApiError(error, mockData.professores);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  getProfessor: async (id: number): Promise<Professor> => {\r\n    try {\r\n      const response = await api.get(`/professores/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      const professor = mockData.professores.find(p => p.id === id);\r\n      if (!professor) throw new Error('Professor não encontrado');\r\n      const mockResponse = await handleApiError(error, professor);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  // Turmas\r\n  getTurmas: async (): Promise<Turma[]> => {\r\n    try {\r\n      const response = await api.get('/turmas');\r\n      return response.data;\r\n    } catch (error) {\r\n      const mockResponse = await handleApiError(error, mockData.turmas);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  getTurma: async (id: number): Promise<Turma> => {\r\n    try {\r\n      const response = await api.get(`/turmas/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      const turma = mockData.turmas.find(t => t.id === id);\r\n      if (!turma) throw new Error('Turma não encontrada');\r\n      const mockResponse = await handleApiError(error, turma);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  // Inscrições\r\n  getInscricoes: async (): Promise<Inscricao[]> => {\r\n    try {\r\n      const response = await api.get('/inscricoes');\r\n      return response.data;\r\n    } catch (error) {\r\n      const mockResponse = await handleApiError(error, mockData.inscricoes);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  getInscricao: async (id: number): Promise<Inscricao> => {\r\n    try {\r\n      const response = await api.get(`/inscricoes/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      const inscricao = mockData.inscricoes.find(i => i.id === id);\r\n      if (!inscricao) throw new Error('Inscrição não encontrada');\r\n      const mockResponse = await handleApiError(error, inscricao);\r\n      return mockResponse.data;\r\n    }\r\n  },\r\n\r\n  // Obter alunos inscritos em uma turma específica\r\n  getAlunosPorTurma: async (turmaId: number): Promise<Aluno[]> => {\r\n    try {\r\n      const inscricoes = await api.get('/inscricoes');\r\n      const inscricoesDaTurma = inscricoes.data.filter((inscricao: Inscricao) =>\r\n        inscricao.turma.id === turmaId\r\n      );\r\n      return inscricoesDaTurma.map((inscricao: Inscricao) => inscricao.aluno);\r\n    } catch (error) {\r\n      // Fallback para dados mock\r\n      const inscricoesDaTurma = mockData.inscricoes.filter(inscricao =>\r\n        inscricao.turma.id === turmaId\r\n      );\r\n      const alunosData = inscricoesDaTurma.map(inscricao => inscricao.aluno);\r\n      const mockResponse = await handleApiError(error, alunosData);\r\n      return mockResponse.data;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}